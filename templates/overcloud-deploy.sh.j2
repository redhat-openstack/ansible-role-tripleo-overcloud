#!/bin/bash

# Simple overcloud deploy script

set -eux

# Source in undercloud credentials.
source {{ working_dir }}/stackrc

# Wait until there are hypervisors available.
while true; do
    count=$(openstack hypervisor stats show -c count -f value)
    if [ $count -gt 0 ]; then
        break
    fi
done

# Include configuration necessary for the ping test here if requested via the
# ansible `test_ping` variable.
{% if test_ping %}
DEPLOY_ENV_YAML=/tmp/deploy_env.yaml

# Set most service workers to 1 to minimise memory usage on
# the deployed overcloud when using the pingtest. We use this
# test over tempest when we are memory constrained, ie the HA jobs.
cat > $DEPLOY_ENV_YAML << EOENV
parameter_defaults:
  controllerExtraConfig:
{% if release in ['mitaka','liberty'] %}
  # In releases before Mitaka, HeatWorkers doesn't modify
  # num_engine_workers, so handle via heat::config
    heat::config::heat_config:
      DEFAULT/num_engine_workers:
        value: 1
{% endif %}
    heat::api_cloudwatch::enabled: false
    heat::api_cfn::enabled: false
  HeatWorkers: 1
  CeilometerWorkers: 1
  CinderWorkers: 1
  GlanceWorkers: 1
  KeystoneWorkers: 1
  NeutronWorkers: 1
  NovaWorkers: 1
  SwiftWorkers: 1
EOENV
{% endif %}

# Deploy the overcloud!
openstack overcloud deploy \
    --templates {{overcloud_templates_path}} \
    {{ deploy_args }} \
    ${DEPLOY_ENV_YAML:+-e $DEPLOY_ENV_YAML} "$@" || true

# We don't always get a useful error code from the openstack deploy command,
# so check `heat stack-list` for a CREATE_FAILED status.
if heat stack-list | grep -q 'CREATE_FAILED'; then

    for failed in $(heat resource-list \
        --nested-depth 5 overcloud | grep FAILED |
        grep 'StructuredDeployment ' | cut -d '|' -f3)
    do heat deployment-show $failed > failed_deployment_$failed.log
    done
fi

